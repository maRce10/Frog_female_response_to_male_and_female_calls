---
title: Stats
subtitle: Frog female response to male and female calls
author: <font size="4"><a href="https://marce10.github.io/">Marcelo Araya-Salas, PhD</a>
date: "`r Sys.Date()`"
toc: true
toc-depth: 2
toc-location: left
number-sections: true
highlight-style: pygments
format:
  html:
    df-print: kable
    code-fold: show
    code-tools: true
    css: qmd.css
editor_options: 
  chunk_output_type: console
---


```{r set root directory, echo = FALSE}

# set working directory 
knitr::opts_knit$set(root.dir =  "..")

```

```{r add link to github repo, echo = FALSE, results='asis'}

# print link to github repo if any
if (file.exists("./.git/config")){
  config <- readLines("./.git/config")
  url <- grep("url",  config, value = TRUE)
  url <- gsub("\\turl = |.git$", "", url)
  cat("\nSource code and data found at [", url, "](", url, ")", sep = "")
  }

```

```{r setup style, echo = FALSE, message = FALSE, warning=FALSE}

# options to customize chunk outputs
knitr::opts_chunk$set(
  class.source = "numberLines lineAnchors", # for code line numbers
  tidy.opts = list(width.cutoff = 65), 
  tidy = TRUE,
  message = FALSE,
  warning = FALSE
 )

my.viridis <- function(...) viridis(alpha = 0.5, begin = 0.3, end = 0.7, ...)

chains <- 4
iter <- 10000

```

```{r custom functions}

# to create several posterior predictive check plots out of a brms fit

custom_ppc <- function(fit, group = NULL, ndraws = 30) {
  by_group  <- if (!is.null(group)){
    TRUE 
    } else
    FALSE
  
  if (by_group)
    by_group  <-  if (any(names(fit$data) == group)){
      TRUE
      } else
    FALSE
  
  if (by_group)
    by_group <-
      if (is.character(fit$data[, group]) |
          is.factor(fit$data[, group])){
        TRUE
        } else
    FALSE
  
  
  if (by_group) {
    ppc_dens <- pp_check(fit,
                         ndraws = ndraws,
                         type = 'dens_overlay_grouped',
                         group = group)
    
    pp_mean <- pp_check(
      fit,
      type = "stat_grouped",
      stat = "mean",
      group = group,
      ndraws = ndraws
    )  + theme_classic()
    
    pp_scat <- pp_check(fit,
                        type = "scatter_avg",
                        # group = group,
                        ndraws = ndraws)
  } else {
    ppc_dens <- pp_check(fit,
                         ndraws = ndraws,
                         type = 'dens_overlay')
    
    pp_mean <- pp_check(fit,
                        type = "stat",
                        stat = "mean",
                        ndraws = ndraws) + theme_classic()
    
    pp_scat <-  pp_check(fit,
                         type = "scatter_avg",
                         ndraws = ndraws)
  }
  
  pp_stat2 <- pp_check(fit, type = "stat_2d", ndraws = ndraws)
  
  pp_plot_list <-
    list(ppc_dens, pp_mean, pp_scat,  pp_stat2)
  
  pp_plot_list[c(1, 3:4)] <-
    lapply(pp_plot_list[c(1, 3:4)], function(x)
      x  + scale_color_viridis_d(
        begin = 0.3,
        end = 0.8,
        alpha = 0.5,
        option = "mako",
      ) + scale_fill_viridis_d(
        begin = 0.3,
        end = 0.8,
        alpha = 0.5,
        option = "mako"
      ) + theme_classic())
  
  
  ppc_plot <- plot_grid(plotlist = pp_plot_list, ncol = 2)
  
  print(ppc_plot)
}

```

::: {.alert .alert-info}

# Purpose {.unnumbered .unlisted}

- Evaluate the effect of different male and female vocal stimuli on the response of female frogs

:::

# Load packages {.unnumbered .unlisted}

```{r load packages}

# knitr is require for creating html/pdf/word reports
# formatR is used for soft-wrapping code

# install/ load packages
sketchy::load_packages(packages = c("Rraven", "warbleR", "ggplot2", "brms", "brmsish", "viridis", "emmeans",  "cowplot", "loo"))

```

# Read data

```{r}

dat <- imp_raven(path = "/home/m/Dropbox/Projects/frog_playback_experiment/data/raw/Lpa_female playbacks_selection tables-20240917T211317Z-001/Lpa_female playbacks_selection tables/", all.data = TRUE, warbler.format = TRUE, name.from.file = TRUE, ext.case = "upper")

# fix names
dat$Name[grep("cour", dat$Name)] <- "PB_courtship"
dat$Name[grep("PB_female", dat$Name)] <- "PB_fem call"

# get response times
resp_time_list <- lapply(unique(dat$sound.files), function(x) {
    
    # print(x)
    X <- dat[dat$sound.files == x, ]
    X <- X[order(X$start), ]    
    resp_indices <- which(X$Name == "fem_resp")
    
    X_stimuli <- X[X$Name != "fem_resp", ]
    
    
    if (length(resp_indices) > 0){
        stimuli.latency <- NULL
        first.stimuli.latency <- NULL
        stimuli <- NULL
        
        for(i in resp_indices){
        
        start <- X[i, "start"]
        time_diffs <- start - X_stimuli$end
        time_diffs <- time_diffs[time_diffs >= 0]
        
        if (i < min(which(X$Name != "fem_resp"))) {
            first.stimuli.latency[length(first.stimuli.latency) + 1] <- NA
            stimuli[length(stimuli) + 1] <- NA
            stimuli.latency[length(stimuli.latency) + 1] <- start
        } else {
            stimuli[length(stimuli) + 1] <- X_stimuli$Name[which.min(time_diffs)]
            stimuli.latency[length(stimuli.latency) + 1] <- min(time_diffs)
            first.stimuli.latency[length(first.stimuli.latency) + 1] <- max(time_diffs)
            }
        }
        
    out_df <- data.frame(sound.files = x, stimuli.latency = stimuli.latency, stimuli = stimuli, first.stimuli.latency = first.stimuli.latency)
    } else
     out_df <- data.frame(sound.files = x, stimuli.latency = NA, stimuli = NA, first.stimuli.latency = NA)
    
    return(out_df)
})

resp_time_df <- do.call(rbind, resp_time_list)

resp_time_df <- resp_time_df[!is.na(resp_time_df$stimuli), ]

```

# Add metadata
```{r}

metadata <- read.csv("./data/raw/female_playbacks_datasheet.csv")
metadata$file_name <- tolower(metadata$file_name)

resp_time_df$experiment <- sapply(tolower(resp_time_df$sound.files), function(x) {
    
    metadata$stimuli[metadata$file_name == x]
})

resp_time_df$experiment <- gsub("+", "|", resp_time_df$experiment, fixed = TRUE)

resp_time_df$location <- sapply(tolower(resp_time_df$sound.files), function(x) {
    
    metadata$location[metadata$file_name == x]
})


# aggregate(stimuli.latency ~ experiment, data = resp_time_df, FUN = mean)

# aggregate(first.stimuli.latency ~ experiment, data = resp_time_df, FUN = mean)
resp_time_df$norm.latency <- ifelse(resp_time_df$experiment == "female call", resp_time_df$stimuli.latency * 25, resp_time_df$stimuli.latency * 7)

aggregate(norm.latency ~ experiment, data = resp_time_df, FUN = mean)

ggplot(resp_time_df,
aes(
x = experiment,
y = norm.latency,
color = experiment,
fill = experiment
)) +
# add half-violin from {ggdist} package
ggdist::stat_halfeye(
# fill = fill_color,
alpha = 0.5,
# custom bandwidth
adjust = .5,
# adjust height
width = .6,
.width = 0,
# move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(# fill = fill_color,
width = .15,
# remove outliers
outlier.shape = NA) +
# add justified jitter from the {gghalves} package
gghalves::geom_half_point(
# color = fill_color,
# draw jitter on the left
side = "l",
# control range of jitter
range_scale = .4,
# add some transparency
alpha = .5,
transformation = ggplot2::position_jitter(height = 0)
) +
scale_color_viridis_d(option = "G", end = 0.8) +
scale_fill_viridis_d(option = "G",
end = 0.8,
alpha = 0.6) +
theme_classic(base_size = 20) +
    ylim(c(0, 450)) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Latency from previous stimuly by experiment", y = "Normalized latency", x = "Experiment type")


ggplot(resp_time_df,
aes(
x = experiment,
y = first.stimuli.latency,
color = experiment,
fill = experiment
)) +
# add half-violin from {ggdist} package
ggdist::stat_halfeye(
# fill = fill_color,
alpha = 0.5,
# custom bandwidth
adjust = .5,
# adjust height
width = .6,
.width = 0,
# move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(# fill = fill_color,
width = .15,
# remove outliers
outlier.shape = NA) +
# add justified jitter from the {gghalves} package
gghalves::geom_half_point(
# color = fill_color,
# draw jitter on the left
side = "l",
# control range of jitter
range_scale = .4,
# add some transparency
alpha = .5,
transformation = ggplot2::position_jitter(height = 0)
) +
scale_color_viridis_d(option = "G", end = 0.8) +
scale_fill_viridis_d(option = "G",
end = 0.8,
alpha = 0.6) +
theme_classic(base_size = 20) +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Latency from first stimuly by experiment", y = "Latency from first stimuli", x = "Experiment type")

```

# Stats

## Regression model

$$
\text{log(norm.latency + 1)} \sim \text{experiment} + \text{location} + (1 \mid \text{sound.files})
$$

```{r, eval = FALSE}

mod <- brm(
formula = log(norm.latency + 1) ~ experiment + location + (1 | sound.files),
iter = iter,
thin = 1,
data = resp_time_df,
family = gaussian(),
silent = 2,
chains = chains,
cores = chains,
control = list(adapt_delta = 0.99,
max_treedepth = 15),
backend = "cmdstanr",
file_refit = "always",
file = "./data/processed/norm_latency_by_experiment"
)

mod <- add_criterion(mod, criterion = c("loo"))

null_mod <- brm(
formula = log(norm.latency + 1) ~ 1 + (1 | sound.files),
iter = iter,
thin = 1,
data = resp_time_df,
family = gaussian(),
silent = 2,
chains = chains,
cores = chains,
control = list(adapt_delta = 0.99,
max_treedepth = 15),
backend = "cmdstanr",
file_refit = "always",
file = "./data/processed/null_norm_latency_by_experiment"
)

null_mod <- add_criterion(null_mod, criterion = c("loo"))

```
## Results

### Model performance vs null model 
```{r , eval = TRUE}

mod <- readRDS("./data/processed/norm_latency_by_experiment.rds")

null_mod <- readRDS("./data/processed/null_norm_latency_by_experiment.rds")

loo_diff <- loo::loo_compare(mod, null_mod)

loo_diff

```

### Model fit
```{r, results = "asis"}

extended_summary(fit = mod,
    n.posterior = 1000, fill = viridis(10)[7], trace.palette = my.viridis,
    highlight = TRUE, remove.intercepts = TRUE)   

```

```{r}

# Generate EMMs for the "experiment" variable
emms_experiment <- emmeans(mod, ~ experiment)

# Get pairwise contrasts between levels of "experiment"
contrast_experiment <- contrast(emms_experiment, method = "pairwise")

# Display the contrasts
summary(contrast_experiment)

```

### Posterior predictive checks

```{r}

custom_ppc(fit = mod)

```

## Regression model

$$
\text{log(norm.latency + 1)} \sim \text{experiment} * \text{location} + (1 \mid \text{sound.files})
$$

```{r, eval = FALSE}

mod <- brm(
formula = log(norm.latency + 1) ~ experiment * location + (1 | sound.files),
iter = iter,
thin = 1,
data = resp_time_df,
family =  gaussian(),
silent = 2,
chains = chains,
cores = chains,
control = list(adapt_delta = 0.99,
max_treedepth = 15),
backend = "cmdstanr",
file_refit = "always",
file = "./data/processed/norm_latency_by_experiment_interaction"
)

mod <- add_criterion(mod, criterion = c("loo"))

null_mod <- brm(
formula = log(norm.latency + 1) ~ 1 + (1 | sound.files),
iter = iter,
thin = 1,
data = resp_time_df,
family =  gaussian(),
silent = 2,
chains = chains,
cores = chains,
control = list(adapt_delta = 0.99,
max_treedepth = 15),
backend = "cmdstanr",
file_refit = "always",
file = "./data/processed/null_norm_latency_by_experiment_interaction"
)

null_mod <- add_criterion(null_mod, criterion = c("loo"))

```

## Results

##### Model performance vs null model 
```{r , eval = TRUE}

mod <- readRDS("./data/processed/norm_latency_by_experiment_interaction.rds")

null_mod <- readRDS("./data/processed/null_norm_latency_by_experiment_interaction.rds")

loo_diff <- loo::loo_compare(mod, null_mod)

loo_diff

```

##### Model fit
```{r, results = "asis"}

extended_summary(fit = mod,
    n.posterior = 1000, fill = viridis(10)[7], trace.palette = my.viridis,
    highlight = TRUE, remove.intercepts = TRUE)   

```

```{r}

# Generate EMMs for the "experiment" variable
emms_experiment <- emmeans(mod, ~ experiment)

# Get pairwise contrasts between levels of "experiment"
contrast_experiment <- contrast(emms_experiment, method = "pairwise")

# Display the contrasts
summary(contrast_experiment)

```

## Posterior predictive checks

```{r}

custom_ppc(fit = mod)

```


::: {.alert .alert-success}

# Takeaways {.unnumbered .unlisted}

::: 
---


# Session information {.unnumbered .unlisted}

```{r session info, echo=F}

sessionInfo()

```
